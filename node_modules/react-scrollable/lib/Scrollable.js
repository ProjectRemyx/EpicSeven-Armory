'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _debounce = require('lodash-es/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _throttle = require('lodash-es/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _Scroller = require('./Scroller');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Scrollable = function (_Component) {
    _inherits(Scrollable, _Component);

    function Scrollable() {
        var _Object$getPrototypeO;

        _classCallCheck(this, Scrollable);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(Scrollable)).call.apply(_Object$getPrototypeO, [this].concat(args)));

        _this.state = {
            viewPortHeight: _this._viewPortHeight({ isBodyScroll: true }),
            scrollTop: _this._scrollTop({ isBodyScroll: true })
        };
        _this.onScroll = (0, _throttle2.default)(function () {
            return _this._onScroll(_this.props);
        }, 50);
        _this.onResize = function () {
            return _this._onResize();
        };
        _this.debouncedUpdateSize = (0, _debounce2.default)(function () {
            return _this._updateSize(_this.props);
        }, 100);
        return _this;
    }

    _createClass(Scrollable, [{
        key: '_onScroll',
        value: function _onScroll(props) {
            this.setState({ scrollTop: this._scrollTop(props) });
        }
    }, {
        key: '_onResize',
        value: function _onResize() {
            this.debouncedUpdateSize();
        }
    }, {
        key: '_updateSize',
        value: function _updateSize(props) {
            this.setState({ viewPortHeight: this._viewPortHeight(props) });
        }
    }, {
        key: '_scrollTop',
        value: function _scrollTop(_ref) {
            var isBodyScroll = _ref.isBodyScroll;

            return isBodyScroll ? window.pageYOffset : _reactDom2.default.findDOMNode(this.refs.container).scrollTop;
        }
    }, {
        key: '_viewPortHeight',
        value: function _viewPortHeight(_ref2) {
            var isBodyScroll = _ref2.isBodyScroll;

            return isBodyScroll ? window.innerHeight : _reactDom2.default.findDOMNode(this.refs.container).offsetHeight;
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var isBodyScroll = this.props.isBodyScroll;

            if (isBodyScroll) {
                window.addEventListener('scroll', this.onScroll);
            } else {
                _reactDom2.default.findDOMNode(this.refs.container).addEventListener('scroll', this.onScroll);
                this.setState({
                    viewPortHeight: this._viewPortHeight(this.props),
                    scrollTop: this._scrollTop(this.props)
                });
            }

            window.addEventListener('resize', this.onResize);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            window.removeEventListener('scroll', this.onScroll);
            _reactDom2.default.findDOMNode(this.refs.container).removeEventListener('scroll', this.onScroll);
            window.removeEventListener('resize', this.onResize);
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _this2 = this;

            if (nextProps.isBodyScroll !== this.props.isBodyScroll) {
                if (nextProps.isBodyScroll) {
                    _reactDom2.default.findDOMNode(this.refs.container).removeEventListener('scroll', this.onScroll);
                    window.addEventListener('scroll', this.onScroll);

                    this.setState({
                        viewPortHeight: this._viewPortHeight(nextProps),
                        scrollTop: this._scrollTop(nextProps)
                    });
                } else {
                    window.removeEventListener('scroll', this.onScroll);
                    _reactDom2.default.findDOMNode(this.refs.container).addEventListener('scroll', this.onScroll);

                    this.setState({ scrollTop: 0 }, function () {
                        return _this2.setState({ viewPortHeight: _this2._viewPortHeight(nextProps) });
                    });
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var finalProps = _extends({}, this.props, this.state);
            return _react2.default.createElement(
                _Scroller.Scroller,
                _extends({}, finalProps, { ref: 'container' }),
                this.props.children
            );
        }
    }, {
        key: 'scrollToRow',
        value: function scrollToRow(index) {
            var toCenter = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            var offset = this.refs.container.getRowOffsetTop(index) - (toCenter ? this.state.viewPortHeight / 2 : 0);

            if (this.props.isBodyScroll) {
                window.scrollTo(0, offset);
            } else {
                _reactDom2.default.findDOMNode(this.refs.container).scrollTop = offset;
            }
        }
    }]);

    return Scrollable;
}(_react.Component);

exports.default = Scrollable;